#!/bin/bash

: ${SUBTAG_PRIMARY_DEFAULT:=latest}
: ${SUBTAG_AUXILIARY_DEFAULT:=}
: ${SUBTAG_ALL_DEFAULT:=$SUBTAG_PRIMARY_DEFAULT}

if [ $# -lt 2 ]; then
	echo "\
Usage: $0 repo:tag map_file1 ... | -

Environment:

SUBTAG_PRIMARY_DEFAULT: ${SUBTAG_PRIMARY_DEFAULT}
SUBTAG_AUXILIARY_DEFAULT: ${SUBTAG_AUXILIARY_DEFAULT}
SUBTAG_ALL_DEFAULT: ${SUBTAG_ALL_DEFAULT}

" >&2
	exit 1
fi

repo=${1%:*}
tag=${1#*:}
shift

# split repo and tag by - and store in arrays
IFS=-
declare -a names=($repo)
declare -a stags=($tag)
unset IFS

# Build a map of subtags and their aliases from the files in the arguments
declare -A aliases # subtags map
for file in "$@"; do
	[[ $file != - ]] && exec <$file
	while read key values; do
		aliases[$key]+=" $key"
		for value in $values; do
			aliases[$key]+=" $value"
			aliases[$value]+=" $value" # append the value also as an alias to itself
		done
	done
done

add_variants() {
	local i=$1 prefix=$2 value
	shift 2
	for value in "$@"; do
		[[ " ${variants[$i]}" =~ " ${value#$prefix} " ]] && continue
		variants[$i]+="${value#$prefix} "
		add_variants "$i" "$prefix" ${aliases[$value]}
	done
}

# Build the subtags variants array
declare -a variants
principal_stags=0
for (( i=0; i < ${#stags[@]}; i++)); do
	stag=${stags[$i]}
	first_version=${stag%%.*}
	# Check if the stag is principal:
	# the previous stag must be principal, it's index must be less than number of the names, it's version must contain only digits or be empty
	if [[ $principal_stags -eq $i && $i -lt ${#names[@]} && $first_version =~ ^[0-9]*$ ]]; then
		: $((principal_stags++))
		name=${names[$i]}
		# the aliases of principal subtags are added with the name prefix stripped
		add_variants "$i" "$name"  ${aliases[$name$stag]}
	else
		# the aliases of auxiliary subtags are added as is
		add_variants "$i" "" ${aliases[$stag]}
	fi
done

# Find the shortest variant of the tag
# All subtags must be present as an alias key for the variant to be actual

declare -a output
defaults=0
for (( i=0; i < ${#variants[@]}; i++)); do
	# Find the shortest variant
	stag=
	for variant in ${variants[$i]}; do
		[[ -z $stag || $stag =~ $variant || $variant == - ]] && stag=$variant
	done
	[[ -z $stag ]] && exit 0

	if [[ $stag = - ]]; then
		: $((defaults++))
		if [[ $i < $principal_stags ]]; then
			output[$i]=$SUBTAG_PRIMARY_DEFAULT
		else
			output[$i]=$SUBTAG_AUXILIARY_DEFAULT
		fi
	else
		output[$i]=$stag
	fi
done

# Output
defaults=0
for (( i=0; i < ${#output[@]}; i++)); do
	stag=${output[$i]}
	if [[ $stag = - ]]; then
		: $((defaults++))
		if [[ $i < $principal_stags ]]; then
			output[$i]=$SUBTAG_PRIMARY_DEFAULT
		else
			output[$i]=$SUBTAG_AUXILIARY_DEFAULT
		fi
	fi
done

if [[ $defaults -eq ${#output[@]} ]]; then
	echo $SUBTAG_ALL_DEFAULT
else
	output=(${output[*]}) # remove empty elements
	# output all the elements joint by '-'
	IFS=-
	echo "${output[*]}"
	unset IFS
fi
